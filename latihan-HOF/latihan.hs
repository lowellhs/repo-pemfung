import Data.List
-----------------------------------------------------------------------------------------------------------------
-- Latihan High Order Function ----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------
arrLength :: [a] -> Int
arrLength arr = sum(map (\x -> 1) arr)
-----------------------------------------------------------------------------------------------------------------
iter :: Int -> (a -> a) -> a -> a
iter 0 f x = x
iter n f x = f(iter (n - 1) f x)
-----------------------------------------------------------------------------------------------------------------
sumSquared n = foldr (+) 0 (map (^2) [1..n])
-----------------------------------------------------------------------------------------------------------------
composeList :: [a -> a] -> (a -> a)
composeList = foldr (.) id
-----------------------------------------------------------------------------------------------------------------
flip :: (a -> b -> c) -> (b -> a -> c)
flip f a b = f b a
-----------------------------------------------------------------------------------------------------------------
-- [ x+1 | x <- xs ]
f1 xs = map (+1) xs

-- [ x+y | x <- xs, y <-ys ]
f2 xs ys = concat (map (\x -> map (\y -> (x+y)) ys) xs)

-- [ x+2 | x <- xs, x > 3 ]
f3 xs = map (+2) (filter (>3) xs)

-- [ x+3 | (x,_) <- xys ]
f4 xys = map (\(x,y) -> x + 3) xys

-- [ x+4 | (x,y) <- xys, x+y < 5 ]
f5 xys = map (\(x,y) -> x+4) (filter (\(x,y) -> x+y < 5) xys)

-- [ x+5 | Just x <- mxs ]
f6 mxs = map (\(Just x) -> x+5) mxs
-----------------------------------------------------------------------------------------------------------------
-- map (+3) xs
f7 xs = [ x+3 | x <- xs ]

-- filter (>7) xs
f8 xs = [ x | x <- xs, x > 7 ]

-- concat (map (\x -> map (\y -> (x,y)) ys) xs)
f9 xs ys = [ (x,y) | x <- xs, y <- ys ]

-- filter (>3) (map (\(x,y) -> x+y) xys)
f10 xys = [ x+y | (x,y) <- xys, x+y > 3 ]
-----------------------------------------------------------------------------------------------------------------
-- listOfLength :: Integer -> Gen a -> Gen [a]
-----------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------
-- Latihan list comprehension dan lazy evaluation ---------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------
divisor :: Int -> [Int]
divisor n = [ x | x <- [1..n], n `mod` x == 0 ]
-----------------------------------------------------------------------------------------------------------------
quicksort :: [Int] -> [Int]
quicksort []      = []
quicksort (x:xs)  = (quicksort (filter (<=x) xs)) ++ [x] ++ (quicksort (filter (>x) xs))
-----------------------------------------------------------------------------------------------------------------
perm [] = [[]]
perm ls = [ x:ps | x <- ls, ps <- perm(ls \\ [x])]
-----------------------------------------------------------------------------------------------------------------
primes = sieve [2 ..]
  where sieve (x:xs) = x : (sieve [z | z <- xs, z `mod` x /= 0])
-----------------------------------------------------------------------------------------------------------------
pythaTriple = [(x,y,z) |  z <- [5 ..], y <- [z, z-1 .. 1], x <- [y, y-1 .. 1], x^2 + y^2 == z^2 ]
-----------------------------------------------------------------------------------------------------------------