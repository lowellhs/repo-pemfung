------------------------------------------------
arrLength :: [a] -> Int
arrLength arr = sum(map (\x -> 1) arr)
------------------------------------------------
iter :: Int -> (a -> a) -> a -> a
iter 0 f x = x
iter n f x = f(iter (n - 1) f x)
------------------------------------------------
sumSquared n = foldr (+) 0 (map (^2) [1..n])
------------------------------------------------
composeList :: [a -> a] -> (a -> a)
composeList = foldr (.) id
------------------------------------------------
flip :: (a -> b -> c) -> (b -> a -> c)
flip f a b = f b a
------------------------------------------------